import sqlite3
from aiogram import types, Router, Bot, F
from aiogram.filters import Command
from aiogram.types import ChatPermissions, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
import random

router = Router()

# –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö —Ç–∞ –∑–∞–º—É—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
banned_users = set()
muted_users = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("warns.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS warns (
    user_id INTEGER,
    chat_id INTEGER,
    first_name TEXT,
    last_name TEXT,
    warns INTEGER DEFAULT 0,
    bio TEXT DEFAULT '',
    profile_photo_id TEXT DEFAULT '',
    PRIMARY KEY (user_id, chat_id)
)
""")
conn.commit()


# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
HISTORY_FILE = "chat_history.txt"

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è —á–∞—Ç—ñ–≤
message_counters = {}



# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª
def save_message_to_file(text):
    with open(HISTORY_FILE, "a", encoding="utf-8") as file:
        file.write(f"{text}\n")

# –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
def get_random_quote():
    try:
        with open(HISTORY_FILE, "r", encoding="utf-8") as file:
            messages = file.readlines()
        return random.choice(messages).strip() if messages else None
    except FileNotFoundError:
        return None


# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(bot: Bot, chat_id, user_id):
    member = await bot.get_chat_member(chat_id, user_id)
    return member.status in ["administrator", "creator"]


# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü—ñ–ª—å–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–æ–º
async def is_target_admin(bot: Bot, chat_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ["administrator", "creator"]
    except Exception as e:
        return False


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å "@heros_son_bot" —É –∫–æ–º–∞–Ω–¥—ñ
def check_bot_command(message: types.Message) -> bool:
    return "@heros_son_bot" in message.text


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
async def handle_command_error(message: types.Message, e: Exception):
    await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –û–ø–∏—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —ñ –∫–æ–º–∞–Ω–¥
commands_dict = {
    "–ó–º—ñ–Ω–∞ –∞–∫–∞—É–Ω—Ç—É": [
        "/profile@heros_son_bot - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
        "/set_photo@heros_son_bot - –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é",
        "/set_bio@heros_son_bot - –î–æ–¥–∞—Ç–∏/–∑–º—ñ–Ω–∏—Ç–∏ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—é",
        "/change_nickname@heros_son_bot - –ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º"
    ],
    "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è": [
        "/ban@heros_son_bot [user] - –ó–∞–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "/unban@heros_son_bot [user] - –†–æ–∑–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "/mute@heros_son_bot [user] [time] - –ó–∞–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "/unmute@heros_son_bot [user] - –†–æ–∑–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "/warn@heros_son_bot - –î–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è",
        "/kick@heros_son_bot [user] - –ö—ñ–∫–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "/report@heros_son_bot - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"
    ],
    "–Ü–Ω—à–µ": [
        "/help@heros_son_bot - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "/start@heros_son_bot - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞",
        "/info@heros_son_bot - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"
    ]
}

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —Ä–æ–∑–¥—ñ–ª—ñ–≤
def generate_help_keyboard():
    keyboard = [
        [InlineKeyboardButton(text=category, callback_data=f"help_{category}")]
        for category in commands_dict.keys()
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /profile
@router.message(Command("profile"))
async def profile_command(message: types.Message):
    if check_bot_command(message):
        user = message.reply_to_message.from_user if message.reply_to_message else message.from_user
        user_id = user.id
        chat_id = message.chat.id

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —á–∞—Ç—ñ
        cursor.execute("""
        INSERT OR IGNORE INTO warns (user_id, chat_id, first_name, last_name, warns)
        VALUES (?, ?, ?, ?, 0)
        """, (user_id, chat_id, user.first_name, user.last_name))
        conn.commit()

        cursor.execute("""
        SELECT first_name, last_name, warns, bio, profile_photo_id FROM warns
        WHERE user_id = ? AND chat_id = ?
        """, (user_id, chat_id))
        result = cursor.fetchone()

        if result:
            first_name, last_name, warns, bio, profile_photo_id = result
            user_name = f"{first_name} {last_name}" if last_name else first_name
            bio_text = bio if bio else "–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞."

            profile_text = (f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <a href='tg://user?id={user_id}'>{user_name}</a>\n"
                            f"ID: {user_id}\n"
                            f"–ß–∞—Ç: {chat_id}\n"
                            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {warns}/3\n"
                            f"–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è: {bio_text}")

            if profile_photo_id:
                await message.answer_photo(photo=profile_photo_id, caption=profile_text, parse_mode="HTML")
            else:
                await message.answer(profile_text, parse_mode="HTML")
        else:
            await message.answer("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


# –ö–æ–º–∞–Ω–¥–∞ /warn
@router.message(Command("warn"))
async def warn_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        if not message.reply_to_message:
            await message.answer("–ö–æ–º–∞–Ω–¥—É /warn –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return

        if not await is_admin(bot, message.chat.id, message.from_user.id):
            await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –¥–∞–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        if await is_target_admin(bot, message.chat.id, target_user_id):
            await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –¥–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫—É.")
            return

        chat_id = message.chat.id
        first_name = target_user.first_name
        last_name = target_user.last_name

        # –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        cursor.execute("""
        INSERT OR IGNORE INTO warns (user_id, chat_id, first_name, last_name, warns)
        VALUES (?, ?, ?, ?, 0)
        """, (target_user_id, chat_id, first_name, last_name))
        cursor.execute("""
        UPDATE warns SET warns = warns + 1 WHERE user_id = ? AND chat_id = ?
        """, (target_user_id, chat_id))
        conn.commit()

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
        cursor.execute("""
        SELECT warns FROM warns WHERE user_id = ? AND chat_id = ?
        """, (target_user_id, chat_id))
        warns = cursor.fetchone()[0]

        if warns >= 3:
            await bot.ban_chat_member(chat_id, target_user_id)
            cursor.execute("""
            DELETE FROM warns WHERE user_id = ? AND chat_id = ?
            """, (target_user_id, chat_id))
            conn.commit()
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {first_name} –∑–∞–±–∞–Ω–µ–Ω–∏–π –∑–∞ 3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.")
        else:
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {first_name} –æ—Ç—Ä–∏–º–∞–≤ {warns}/3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å.")


# –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–¥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /help, /ban, /unban) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
# –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω —á–ª–µ–Ω—Å—Ç–≤–∞
@router.message(F.content_type.in_({"new_chat_members"}))
async def new_chat_members(message: types.Message):
    for user in message.new_chat_members:
        await message.answer(
            f"–í—ñ—Ç–∞—î–º–æ, {user.first_name} {user.last_name if user.last_name else ''}! üéâ\n"
            f"–î—è–∫—É—î–º–æ, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏. "
            f"–Ø - –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ –±—É–¥—å-—è–∫–∏—Ö –ø–∏—Ç–∞–Ω—å. "
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ - /help."
        )

@router.message(F.content_type.in_({"left_chat_member"}))
async def left_chat_members(message: types.Message):
    await message.answer(
        f"–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è, {message.left_chat_member.first_name}"
        f" {message.left_chat_member.last_name if message.left_chat_member.last_name else ''}! üòî\n"
        f"–®–∫–æ–¥–∞, —â–æ –≤–∏ –ø–æ–∫–∏–¥–∞—î—Ç–µ –Ω–∞—à—É –≥—Ä—É–ø—É. –ù–∞–¥—ñ—î–º–æ—Å—è –ø–æ–±–∞—á–∏—Ç–∏ –≤–∞—Å –∑–Ω–æ–≤—É!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def help_command(message: types.Message):
    keyboard = generate_help_keyboard()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:", reply_markup=keyboard)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda call: call.data.startswith("help_"))
async def help_callback_handler(callback_query: CallbackQuery):
    category = callback_query.data.split("_", 1)[1]  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ä–æ–∑–¥—ñ–ª—É
    commands = commands_dict.get(category, [])

    if commands:
        commands_text = "\n".join(commands)
        await callback_query.message.edit_text(
            f"–ö–æ–º–∞–Ω–¥–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ <b>{category}</b>:\n\n{commands_text}",
            parse_mode="HTML",
            reply_markup=generate_help_keyboard()
        )
    else:
        await callback_query.answer("–†–æ–∑–¥—ñ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


# –ö–æ–º–∞–Ω–¥–∞ /ban
@router.message(Command("ban"))
async def ban_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        if not message.reply_to_message:
            await message.answer("–ö–æ–º–∞–Ω–¥—É /ban –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return

        if not await is_admin(bot, message.chat.id, message.from_user.id):
            await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        if await is_target_admin(bot, message.chat.id, target_user_id):
            await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–∞–Ω–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–∞.")
            return

        await bot.ban_chat_member(message.chat.id, target_user_id)
        banned_users.add(target_user_id)
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –∑–∞–±–∞–Ω–µ–Ω–∏–π.")


# –ö–æ–º–∞–Ω–¥–∞ /unban
@router.message(Command("unban"))
async def unban_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        if not message.reply_to_message:
            await message.answer("–ö–æ–º–∞–Ω–¥—É /unban –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return

        if not await is_admin(bot, message.chat.id, message.from_user.id):
            await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å —Ä–æ–∑–ø–∞–ª—é–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–ø–∏—Å–∫—É –∑–∞–±–∞–Ω–µ–Ω–∏—Ö
        if target_user_id not in banned_users:
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î –≤ –±–∞–Ω—ñ.")
            return

        await bot.unban_chat_member(message.chat.id, target_user_id)
        banned_users.remove(target_user_id)
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–∞–Ω–µ–Ω–∏–π.")


# –ö–æ–º–∞–Ω–¥–∞ /mute
@router.message(Command("mute"))
async def mute_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        if not message.reply_to_message:
            await message.answer("–ö–æ–º–∞–Ω–¥—É /mute –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return

        if not await is_admin(bot, message.chat.id, message.from_user.id):
            await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        if await is_target_admin(bot, message.chat.id, target_user_id):
            await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–º—É—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–∞.")
            return

        mute_time = 60 * 60  # –ó–∞–º—É—Ç–∏—Ç–∏ –Ω–∞ 1 –≥–æ–¥–∏–Ω—É
        until_date = message.date + mute_time

        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        muted_users[target_user_id] = until_date
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –∑–∞–º—É—á–µ–Ω–∏–π –Ω–∞ {mute_time // 60} —Ö–≤–∏–ª–∏–Ω.")


# –ö–æ–º–∞–Ω–¥–∞ /unmute
@router.message(Command("unmute"))
async def unmute_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        if not message.reply_to_message:
            await message.answer("–ö–æ–º–∞–Ω–¥—É /unmute –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return

        if not await is_admin(bot, message.chat.id, message.from_user.id):
            await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å —Ä–æ–∑–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–ø–∏—Å–∫—É –∑–∞–º—É—á–µ–Ω–∏—Ö
        if target_user_id not in muted_users:
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î –≤ –º—É—Ç—ñ.")
            return

        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user_id,
            permissions=ChatPermissions(can_send_messages=True)
        )
        del muted_users[target_user_id]
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–º—É—á–µ–Ω–∏–π.")


# –ö–æ–º–∞–Ω–¥–∞ /report
@router.message(Command(commands=["report"]))
async def report_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        try:
            admins = await bot.get_chat_administrators(message.chat.id)
            admin_list = ""

            for admin in admins:
                user_id = admin.user.id

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ
                cursor.execute("SELECT first_name, last_name FROM warns WHERE user_id = ?", (user_id,))
                result = cursor.fetchone()

                if result:
                    first_name, last_name = result
                else:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —ñ–º'—è Telegram, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ
                    first_name = admin.user.first_name
                    last_name = admin.user.last_name

                # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                user_name = f"{first_name} {last_name}" if last_name else first_name
                admin_list += f"<a href='tg://user?id={user_id}'>{user_name}</a>\n"

            if admin_list:
                await message.answer(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —á–∞—Ç—É:\n{admin_list}", parse_mode="HTML")
            else:
                await message.answer("–£ —Ü—å–æ–º—É —á–∞—Ç—ñ –Ω–µ–º–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        except Exception as e:
            await handle_command_error(message, e)


# –ö–æ–º–∞–Ω–¥–∞ /kick
@router.message(Command("kick"))
async def kick_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        try:
            user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.get_args().split()[
                0].strip('@')

            if not await is_admin(bot, message.chat.id, user_id):
                if await is_admin(bot, message.chat.id, message.from_user.id):
                    await bot.ban_chat_member(message.chat.id, user_id, until_date=0)
                    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∫—ñ–∫–Ω—É—Ç–∏–π.")
                else:
                    await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∫—ñ–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            else:
                await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∫—ñ–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            await handle_command_error(message, e)

# –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ–¥–∞—é—Ç—å—Å—è —Ç—É—Ç

# 1. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω—ñ–∫–Ω–µ–π–º—É
@router.message(Command(commands=["change_nickname"]))
async def change_nickname_command(message: types.Message, command: Command):
    if check_bot_command(message):
        args = command.args  # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
        if args:
            new_nickname = args.strip()
            user_id = message.from_user.id

            cursor.execute("UPDATE warns SET first_name = ? WHERE user_id = ?", (new_nickname, user_id))
            conn.commit()

            await message.answer(f"–í–∞—à –Ω—ñ–∫–Ω–µ–π–º —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_nickname}.")
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")


# 2. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–∑–º—ñ–Ω–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é
@router.message(Command("set_photo"))
async def set_profile_photo_command(message: types.Message):
    if check_bot_command(message):
        if message.reply_to_message and message.reply_to_message.photo:
            user_id = message.from_user.id
            photo = message.reply_to_message.photo[-1].file_id  # –ë–µ—Ä–µ–º–æ –Ω–∞–π–≤–∏—â—É —è–∫—ñ—Å—Ç—å

            cursor.execute("UPDATE warns SET profile_photo_id = ? WHERE user_id = ?", (photo, user_id))
            conn.commit()

            await message.answer("–í–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ —è–∫ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é.")


# 3. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–∑–º—ñ–Ω–∏ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—ó
@router.message(Command(commands=["set_bio"]))
async def set_bio_command(message: types.Message, command: Command):
    if check_bot_command(message):
        bio = command.args  # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
        if bio:
            user_id = message.from_user.id

            cursor.execute("UPDATE warns SET bio = ? WHERE user_id = ?", (bio, user_id))
            conn.commit()

            await message.answer("–í–∞—à–∞ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –±—ñ–æ–≥—Ä–∞—Ñ—ñ—ó –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")


@router.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: Message):
    chat_id = message.chat.id
    text = message.text

    await message.reply('text')

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Ñ–∞–π–ª—É
    save_message_to_file(text)

    # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —á–∞—Ç—É
    if chat_id not in message_counters:
        message_counters[chat_id] = 0
    message_counters[chat_id] += 1

    # –†–∞–∑ –Ω–∞ 1-10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω—É —Ü–∏—Ç–∞—Ç—É
    if message_counters[chat_id] >= random.randint(1, 10):
        random_quote = get_random_quote()
        if random_quote:
            await message.reply(random_quote)
        else:
            await message.reply("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è.")
        message_counters[chat_id] = 0  # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
