import sqlite3
from aiogram import types, Router, Bot, F
from aiogram.filters import Command
from aiogram.types import ChatPermissions

router = Router()

# –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö —Ç–∞ –∑–∞–º—É—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
banned_users = set()
muted_users = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("warns.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS warns (
    user_id INTEGER PRIMARY KEY,
    first_name TEXT,
    last_name TEXT,
    warns INTEGER
)
""")
conn.commit()


# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(bot: Bot, chat_id, user_id):
    member = await bot.get_chat_member(chat_id, user_id)
    return member.status in ["administrator", "creator"]


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å "@heros_son_bot" —É –∫–æ–º–∞–Ω–¥—ñ
def check_bot_command(message: types.Message) -> bool:
    return "@heros_son_bot" in message.text


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
async def handle_command_error(message: types.Message, e: Exception):
    await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ /profile
@router.message(Command("profile"))
async def profile_command(message: types.Message):
    if check_bot_command(message):
        if message.reply_to_message:
            user = message.reply_to_message.from_user
        else:
            user = message.from_user

        user_id = user.id
        first_name = user.first_name
        last_name = user.last_name
        cursor.execute("SELECT warns FROM warns WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        warns = result[0] if result else 0

        user_name = f"{first_name} {last_name}" if last_name else first_name
        profile_text = (f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <a href='tg://user?id={user_id}'>{user_name}</a>\n"
                        f"ID: {user_id}\n"
                        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {warns}/3")
        await message.answer(profile_text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /warn
@router.message(Command("warn"))
async def warn_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        if message.reply_to_message:
            if not await is_admin(bot, message.chat.id, message.from_user.id):
                await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –¥–∞–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.")
                return

            user = message.reply_to_message.from_user
            user_id = user.id
            first_name = user.first_name
            last_name = user.last_name

            cursor.execute("INSERT OR IGNORE INTO warns (user_id, first_name, last_name, warns) VALUES (?, ?, ?, ?)",
                           (user_id, first_name, last_name, 0))
            cursor.execute("UPDATE warns SET warns = warns + 1 WHERE user_id = ?", (user_id,))
            conn.commit()

            cursor.execute("SELECT warns FROM warns WHERE user_id = ?", (user_id,))
            warns = cursor.fetchone()[0]

            if warns >= 3:
                if await is_admin(bot, message.chat.id, user_id):
                    await bot.restrict_chat_member(message.chat.id, user_id,
                                                   permissions=ChatPermissions(can_send_messages=True))
                    await bot.promote_chat_member(message.chat.id, user_id,
                                                  can_change_info=False,
                                                  can_delete_messages=False,
                                                  can_invite_users=True,
                                                  can_restrict_members=False,
                                                  can_pin_messages=False,
                                                  can_promote_members=False)
                    cursor.execute("DELETE FROM warns WHERE user_id = ?", (user_id,))
                    conn.commit()
                    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {first_name} –∑–∞–±–∞–Ω–µ–Ω–∏–π –∑–∞ 3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.")
                else:
                    await bot.ban_chat_member(message.chat.id, user_id)
                    cursor.execute("DELETE FROM warns WHERE user_id = ?", (user_id,))
                    conn.commit()
                    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {first_name} –∑–∞–±–∞–Ω–µ–Ω–∏–π –∑–∞ 3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.")
            else:
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {first_name} –æ—Ç—Ä–∏–º–∞–≤ {warns}/3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å.")
        else:
            await message.answer("–ö–æ–º–∞–Ω–¥—É /warn –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")


# –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω —á–ª–µ–Ω—Å—Ç–≤–∞
@router.message(F.content_type.in_({"new_chat_members", "left_chat_member"}))
async def membership_changes(message: types.Message):
    if message.new_chat_members:
        for user in message.new_chat_members:
            await message.answer(f"–í—ñ—Ç–∞—î–º–æ, {user.first_name} {user.last_name if user.last_name else ''}! üéâ\n"
                                 f"–î—è–∫—É—î–º–æ, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏. "
                                 f"–Ø - –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ –±—É–¥—å-—è–∫–∏—Ö –ø–∏—Ç–∞–Ω—å. "
                                 f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ - /help.")
    elif message.left_chat_member:
        await message.answer(f"–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è, {message.left_chat_member.first_name}"
                             f" {message.left_chat_member.last_name if message.left_chat_member.last_name else ''}! üòî\n"
                             f"–®–∫–æ–¥–∞, —â–æ –≤–∏ –ø–æ–∫–∏–¥–∞—î—Ç–µ –Ω–∞—à—É –≥—Ä—É–ø—É. –ù–∞–¥—ñ—î–º–æ—Å—è –ø–æ–±–∞—á–∏—Ç–∏ –≤–∞—Å –∑–Ω–æ–≤—É!")


# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def help_command(message: types.Message):
    if check_bot_command(message):
        help_text = (
            "/help@heros_son_bot - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏\n"
            "/ban@heros_son_bot [user] - –ó–∞–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "/unban@heros_son_bot [user] - –†–æ–∑–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "/mute@heros_son_bot [user] [time] - –ó–∞–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –ø–µ–≤–Ω–∏–π —á–∞—Å (–≤ –≥–æ–¥–∏–Ω–∞—Ö)\n"
            "/unmute@heros_son_bot [user] - –†–æ–∑–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "/report@heros_son_bot - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n"
            "/kick@heros_son_bot [user] - –ö—ñ–∫–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "/profile@heros_son_bot - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "/warn@heros_son_bot - –î–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"
        )
        await message.answer(help_text)


# –ö–æ–º–∞–Ω–¥–∞ /ban
@router.message(Command("ban"))
async def ban_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        try:
            user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.get_args().split()[
                0]

            if not await is_admin(bot, message.chat.id, user_id):
                if await is_admin(bot, message.chat.id, message.from_user.id):
                    await bot.ban_chat_member(message.chat.id, user_id)
                    banned_users.add(user_id)
                    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–∞–Ω–µ–Ω–∏–π.")
                else:
                    await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            else:
                await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–∞–Ω–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            await handle_command_error(message, e)


# –ö–æ–º–∞–Ω–¥–∞ /unban
@router.message(Command("unban"))
async def unban_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        try:
            user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.get_args().split()[
                0]

            if user_id in banned_users:
                await bot.unban_chat_member(message.chat.id, user_id)
                banned_users.remove(user_id)
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–æ–∑–±–∞–Ω–µ–Ω–∏–π.")
            else:
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –≤ –±–∞–Ω—ñ.")
        except Exception as e:
            await handle_command_error(message, e)


# –ö–æ–º–∞–Ω–¥–∞ /mute
@router.message(Command("mute"))
async def mute_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        try:
            args = message.get_args().split()
            user_id = message.reply_to_message.from_user.id if message.reply_to_message else args[0]
            mute_time = int(args[1]) * 60 if len(args) > 1 else 60  # Default to 1 hour if no time specified
            until_date = message.date + mute_time

            if not await is_admin(bot, message.chat.id, user_id):
                if await is_admin(bot, message.chat.id, message.from_user.id):
                    await bot.restrict_chat_member(message.chat.id, user_id, permissions=ChatPermissions(

                    ), until_date=until_date)
                    muted_users[user_id] = until_date
                    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–º—É—á–µ–Ω–∏–π –Ω–∞ {mute_time // 60} —Ö–≤–∏–ª–∏–Ω.")
                else:
                    await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            else:
                await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–º—É—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            await handle_command_error(message, e)


# –ö–æ–º–∞–Ω–¥–∞ /unmute
@router.message(Command("unmute"))
async def unmute_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        try:
            user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.get_args().split()[
                0]

            if user_id in muted_users:
                await bot.restrict_chat_member(message.chat.id, user_id, permissions=ChatPermissions(
                    can_send_messages=True))
                del muted_users[user_id]
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–æ–∑–º—É—á–µ–Ω–∏–π.")
            else:
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –≤ –º—É—Ç—ñ.")
        except Exception as e:
            await handle_command_error(message, e)


# –ö–æ–º–∞–Ω–¥–∞ /report
@router.message(Command("report"))
async def report_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        try:
            admins = await bot.get_chat_administrators(message.chat.id)
            admin_list = ""
            for admin in admins:
                admin_name = f"{admin.user.first_name} {admin.user.last_name}" if admin.user.last_name else\
                    admin.user.first_name
                admin_list += f"<a href='tg://user?id={admin.user.id}'>{admin_name}</a>\n"
            await message.answer(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —á–∞—Ç—É:\n{admin_list}", parse_mode="HTML")
        except Exception as e:
            await handle_command_error(message, e)


# –ö–æ–º–∞–Ω–¥–∞ /kick
@router.message(Command("kick"))
async def kick_command(message: types.Message, bot: Bot):
    if check_bot_command(message):
        try:
            user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.get_args().split()[
                0].strip('@')

            if not await is_admin(bot, message.chat.id, user_id):
                if await is_admin(bot, message.chat.id, message.from_user.id):
                    await bot.ban_chat_member(message.chat.id, user_id, until_date=0)
                    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∫—ñ–∫–Ω—É—Ç–∏–π.")
                else:
                    await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∫—ñ–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            else:
                await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∫—ñ–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            await handle_command_error(message, e)
