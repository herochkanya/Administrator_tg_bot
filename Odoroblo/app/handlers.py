import sqlite3
from aiogram import types, Router, Bot, F
from aiogram.filters import Command
from aiogram.types import ChatPermissions, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, FSInputFile
import random
from config import TOKEN, BOT_NAME, X, O
import traceback
from Games import XO
import datetime
from datetime import datetime, timedelta, date
import asyncio


bot = Bot(token=TOKEN)
router = Router()

# –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö —Ç–∞ –∑–∞–º—É—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
banned_users = set()
muted_users = {}

son = [
    "—Å–∏–Ω—É", "—Å–∏–Ω–∞", "—Å–∏–Ω–æ—á–æ–∫", "—Ö—ñ—Ä–æ",
    "hero", "son", "myson", "child", "kiddo", "junior"
]

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
with sqlite3.connect("DataBases/warns.db") as conn:
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS profiles (
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        bio TEXT DEFAULT '',
        profile_photo_id TEXT DEFAULT ''
    )
    """)

commands_dict = {
    "–ó–º—ñ–Ω–∞ –∞–∫–∞—É–Ω—Ç—É": [
        "üë§ /profile - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
        "üèû /set_photo - –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é",
        "üîµ /set_bio - –î–æ–¥–∞—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—é",
        "üîµ /change_nickname - –ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º",
        "üë§ /whois - –î—ñ–∑–Ω–∞—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ username."
    ],
    "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è": [
        "üö´ /ban - –ó–∞–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "‚úÖ /unban - –†–æ–∑–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "üö´ /mute - –ó–∞–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "‚úÖ /unmute - –†–æ–∑–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "‚ö†Ô∏è /warn - –î–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è",
        "‚ùå /kick - –ö—ñ–∫–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "üó£ /report - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"
    ],
    "–í–∏—Ö–æ–≤–∞–Ω–Ω—è": [
        "ü§ú /beat_with_belt - –ü–æ–±–∏—Ç–∏ –æ–¥–æ—Ä–æ–±–ª–æ"
    ],
    "–í—ñ–¥–Ω–æ—Å–∏–Ω–∏": [
        "‚ù§Ô∏è !!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ - –†–æ–∑–ø–æ—á–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏.",
        "üíî !!—Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏.",
        "üíë !–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ - –†–æ–∑–ø–æ—á–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ —É —á–∞—Ç—ñ.",
        "üëã !—Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ —É —á–∞—Ç—ñ.",
        "üë∞‚Äç‚ôÇÔ∏è !—à–ª—é–±–∏ - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –≥–ª–æ–±–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏.",
        "üëë !—Ç–æ–ø—à–ª—é–±—ñ–≤ - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–ø –ª–æ–∫–∞–ª—å–Ω–∏—Ö —à–ª—é–±—ñ–≤ —á–∞—Ç—É."
    ],
    "–Ü–Ω—à–µ": [
        "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "üîµ /start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞",
        "üìú /stats - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
        "üéÑ /christmas - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä –¥–æ –ù–æ–≤–æ–≥–æ —Ä–æ–∫—É.",
        "üå≥ /create_tree - –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ—Ä—ñ—á–Ω–µ –¥–µ—Ä–µ–≤–æ —É —Å–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ.",
        "üéÆ /xo - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É \"–•—Ä–µ—Å—Ç–∏–∫–∏-–Ω—É–ª–∏–∫–∏\"."
    ],
    "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ": [
        "üëç + - –î–æ–¥–∞—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ."
    ]
}

# –¢—Ä–µ–∫–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–∞–π–º–µ—Ä—ñ–≤
active_timers = {}


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def create_connection():
    return sqlite3.connect('DataBases/history.db')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def create_messages_table():
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT UNIQUE
            )
        ''')

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —É–Ω–∏–∫–∞—é—á–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Ñ—Ä–∞–∑
def save_message_to_file(text):
    try:
        with create_connection() as conn:
            cursor = conn.cursor()
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∞
            cursor.execute('SELECT COUNT(*) FROM messages WHERE text = ?', (text,))
            count = cursor.fetchone()[0]
            if count == 0:
                # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –¥—É–±–ª—ñ–∫–∞—Ç–∞ –Ω–µ–º–∞—î
                cursor.execute('''
                    INSERT OR IGNORE INTO messages (text)
                    VALUES (?)
                ''', (text,))
    except sqlite3.Error as e:
        print(f"Error saving message: {e}")

# –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_random_message():
    try:
        with create_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT text FROM messages ORDER BY RANDOM() LIMIT 1')
            result = cursor.fetchone()
            return result[0] if result else None
    except sqlite3.Error as e:
        print(f"Error retrieving message: {e}")
        return None

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
create_messages_table()

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(bot: Bot, chat_id, user_id):
    member = await bot.get_chat_member(chat_id, user_id)
    return member.status in ["administrator", "creator"]

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü—ñ–ª—å–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–æ–º
async def is_target_admin(bot: Bot, chat_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ["administrator", "creator"]
    except Exception as e:
        return False

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å bot's username —É –∫–æ–º–∞–Ω–¥—ñ
def check_bot_command(message: types.Message) -> bool:
    return f"@{BOT_NAME}" in message.text

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
async def handle_command_error(message: types.Message, e: Exception):
    await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —Ä–æ–∑–¥—ñ–ª—ñ–≤
def generate_help_keyboard():
    keyboard = [
        [InlineKeyboardButton(text=category, callback_data=f"help_{category}")]
        for category in commands_dict.keys()
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç—É
def create_warnings_table(chat_id):
    sanitized_chat_id = str(chat_id).replace("-", "_")
    table_name = f"chat_{sanitized_chat_id}_warns"

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            user_id INTEGER PRIMARY KEY,
            warns INTEGER DEFAULT 0
        )
        """)
    return table_name

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
def update_message_count(chat_id, user_id):
    sanitized_chat_id = str(chat_id).replace("-", "_")
    table_name = f"chat_{sanitized_chat_id}_messages"

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
        cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            user_id INTEGER PRIMARY KEY,
            messages_count INTEGER DEFAULT 0
        )
        """)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute(f"SELECT messages_count FROM {table_name} WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()

        if result is None:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—é
            cursor.execute(f"INSERT INTO {table_name} (user_id, messages_count) VALUES (?, ?)", (user_id, 1))
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î, –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
            messages_count = result[0] + 1
            cursor.execute(f"UPDATE {table_name} SET messages_count = ? WHERE user_id = ?", (messages_count, user_id))


def field_markup(field):
    buttons = []
    buttons_row = []
    for k, v in field.items():
        buttons_row.append(types.InlineKeyboardButton(text=v, callback_data=f'walk:{k}'))
        if len(buttons_row) == 3:
            buttons.append(buttons_row)
            buttons_row = []
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def result_text(field):
    text = ''
    string = ''
    count = 0
    for i in field.values():
        string += i
        count += 1
        if count == 3:
            text += string + '\n'
            string = ''
            count = 0
    return text


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å—Ç–æ–≤–ø—Ü—è –≤ —Ç–∞–±–ª–∏—Ü—ñ
def column_exists(cursor, table, column):
    cursor.execute(f"PRAGMA table_info({table})")
    columns = [info[1] for info in cursor.fetchall()]
    return column in columns


async def update_timer(chat_id: int, message_id: int, end_time: datetime):
    """–û–Ω–æ–≤–ª—é—î —Ç–∞–π–º–µ—Ä –¥–æ –∑–∞–¥–∞–Ω–æ–≥–æ —á–∞—Å—É."""
    try:
        while True:
            now = datetime.now()
            remaining = end_time - now
            if remaining.total_seconds() <= 0:
                # –ß–∞—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î–º–æ
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="üéâ –ó –ù–æ–≤–∏–º —Ä–æ–∫–æ–º! üéâ"
                )
                break
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑–∞–ª–∏—à–æ–∫ —á–∞—Å—É
            time_left = str(remaining).split(".")[0]  # –ë–µ–∑ –º—ñ–∫—Ä–æ—Å–µ–∫—É–Ω–¥
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–æ –ù–æ–≤–æ–≥–æ —Ä–æ–∫—É: {time_left}"
                )
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            
            # –†–æ–±–∏–º–æ –ø–∞—É–∑—É –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await asyncio.sleep(5)  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    except asyncio.CancelledError:
        # –Ø–∫—â–æ —Ç–∞–π–º–µ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
        print(f"–¢–∞–π–º–µ—Ä –¥–ª—è —á–∞—Ç—É {chat_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ç–∞–π–º–µ—Ä—ñ –¥–ª—è —á–∞—Ç—É {chat_id}: {e}")


def create_marriages_table():
    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS marriages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user1_id INTEGER,
            user2_id INTEGER,
            level INTEGER DEFAULT 1,
            start_date TEXT
        )
        """)
create_marriages_table()


def create_local_relationships_table(chat_id):
    sanitized_chat_id = str(chat_id).replace("-", "_")  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –¥–µ—Ñ—ñ—Å–∏ –Ω–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS local_relationships_{sanitized_chat_id} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user1_id INTEGER,
            user2_id INTEGER,
            level INTEGER DEFAULT 1,
            start_date TEXT
        )
        """)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–∏–Ω
async def get_relationships(user_id, chat_id):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ –∑ –ë–î
    sanitized_chat_id = str(chat_id).replace("-", "_")
    relationships_text = ""

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        # –ì–ª–æ–±–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
        cursor.execute("""
        SELECT user1_id, user2_id, level, start_date FROM marriages 
        WHERE user1_id = ? OR user2_id = ?
        """, (user_id, user_id))
        global_marriages = cursor.fetchall()

        # –õ–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
        cursor.execute(f"""
        SELECT user1_id, user2_id, level, start_date FROM local_relationships_{sanitized_chat_id} 
        WHERE (user1_id = ? OR user2_id = ?)
        """, (user_id, user_id))
        local_marriages = cursor.fetchall()

    if global_marriages or local_marriages:
        relationships_text += f"{' ' * 15}<b>–í–∞—à—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏:</b>{' ' * 15}\n"

        # –ì–ª–æ–±–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
        if global_marriages:
            relationships_text += "\n<strong>–ì–ª–æ–±–∞–ª—å–Ω—ñ:</strong>\n"
            for marriage in global_marriages:
                partner_id = marriage[1] if marriage[0] == user_id else marriage[0]
                level = marriage[2]
                start_date = datetime.strptime(marriage[3], "%Y-%m-%d")
                duration = (datetime.now() - start_date).days

                relation_type = "–®–ª—é–±" if level == 2 else "–í—ñ–¥–Ω–æ—Å–∏–Ω–∏"

                cursor.execute("SELECT first_name FROM profiles WHERE user_id = ?", (partner_id,))
                partner_name = cursor.fetchone()
                partner_name = partner_name[0] if partner_name else "–ù–µ–≤—ñ–¥–æ–º–æ"

                relationships_text += (
                    f"{relation_type} –∑ <a href='tg://openmessage?user_id={partner_id}'>{partner_name}</a>  "
                    f"‚åõÔ∏è: {duration} –¥–Ω—ñ–≤."
                )

        # –õ–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
        if local_marriages:
            relationships_text += "\n<strong>–õ–æ–∫–∞–ª—å–Ω—ñ:</strong>\n"
            for marriage in local_marriages:
                partner_id = marriage[1] if marriage[0] == user_id else marriage[0]
                level = marriage[2]
                start_date = datetime.strptime(marriage[3], "%Y-%m-%d")
                duration = (datetime.now() - start_date).days

                relation_type = "–®–ª—é–±" if level == 2 else "–í—ñ–¥–Ω–æ—Å–∏–Ω–∏"

                cursor.execute("SELECT first_name FROM profiles WHERE user_id = ?", (partner_id,))
                partner_name = cursor.fetchone()
                partner_name = partner_name[0] if partner_name else "–ù–µ–≤—ñ–¥–æ–º–æ"

                relationships_text += (
                    f"{relation_type} –∑ <a href='tg://openmessage?user_id={partner_id}'>{partner_name}</a>  "
                    f"‚åõÔ∏è: {duration} –¥–Ω—ñ–≤.\n"
                )

    return relationships_text

async def get_top_marriages(chat_id, user_id):  # –î–æ–¥–∞–Ω–æ user_id —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    sanitized_chat_id = str(chat_id).replace("-", "_")
    marriages_text = ""

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —à–ª—é–±–∏ —Ä—ñ–≤–Ω—è 1 —ñ 2 –¥–ª—è —á–∞—Ç—É, —Å–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        cursor.execute(f"""
        SELECT user1_id, user2_id, level, start_date FROM local_relationships_{sanitized_chat_id}
        WHERE level IN (1, 2)  -- –®–ª—é–±–∏ —Ä—ñ–≤–Ω—è 1 —Ç–∞ 2
        ORDER BY start_date ASC
        """)
        marriages = cursor.fetchall()

    if marriages:
        marriages_text += f"{' ' * 15}<b>–¢–æ–ø —à–ª—é–±–∏ —á–∞—Ç—É:</b>{' ' * 15}\n"

        for marriage in marriages:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
            partner_id = marriage[1] if marriage[0] == user_id else marriage[0]
            start_date = datetime.strptime(marriage[3], "%Y-%m-%d")
            duration = (datetime.now() - start_date).days

            level = marriage[2]
            relation_type = "–®–ª—é–±" if level == 2 else "–í—ñ–¥–Ω–æ—Å–∏–Ω–∏"

            cursor.execute("SELECT first_name FROM profiles WHERE user_id = ?", (partner_id,))
            partner_name = cursor.fetchone()
            partner_name = partner_name[0] if partner_name else "–ù–µ–≤—ñ–¥–æ–º–æ"

            cursor.execute("SELECT first_name FROM profiles WHERE user_id = ?", (marriage[0],))
            user_name = cursor.fetchone()
            user_name = user_name[0] if user_name else "–ù–µ–≤—ñ–¥–æ–º–æ"

            marriages_text += (
                f"{relation_type} –º—ñ–∂ <a href='tg://openmessage?user_id={marriage[0]}'>{user_name}</a> —ñ "
                f"<a href='tg://openmessage?user_id={partner_id}'>{partner_name}</a>  "
                f"‚åõÔ∏è: {duration} –¥–Ω—ñ–≤.\n"
            )

    else:
        marriages_text = "–ù–µ–º–∞—î —à–ª—é–±—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É."

    return marriages_text




@router.message(Command("christmas"))
async def start_timer(message: Message):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /christmas —ñ –∑–∞–ø—É—Å–∫–∞—î –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä."""
    chat_id = message.chat.id
    
    # –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    if chat_id in active_timers:
        task = active_timers[chat_id]["task"]
        if not task.done():  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            task.cancel()  # –°–∫–∞—Å–æ–≤—É—î–º–æ
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –¥–æ –ù–æ–≤–æ–≥–æ —Ä–æ–∫—É
    now = datetime.now()
    next_year = now.year + 1
    new_year_time = datetime(next_year, 1, 1, 0, 0, 0)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    sent_message = await message.answer("‚è≥ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–π–º–µ—Ä...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    task = asyncio.create_task(update_timer(chat_id, sent_message.message_id, new_year_time))
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —Ç—Ä–µ–∫–µ—Ä—ñ
    active_timers[chat_id] = {
        "task": task,
        "message_id": sent_message.message_id
    }

    print(f"–ó–∞–ø—É—â–µ–Ω–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —á–∞—Ç—É {chat_id}.")


@router.message(Command("create_tree"))
async def create_tree(message: Message):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    user_id = message.from_user.id

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–ª–æ–Ω–æ–∫ 'reputation' —Ç–∞ 'presents'
        cursor.execute("PRAGMA table_info(profiles);")
        columns = [column[1] for column in cursor.fetchall()]

        # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É 'reputation', —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if "reputation" not in columns:
            cursor.execute("""
            ALTER TABLE profiles ADD COLUMN reputation INTEGER DEFAULT 0
            """)

        # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É 'presents', —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if "presents" not in columns:
            cursor.execute("""
            ALTER TABLE profiles ADD COLUMN presents INTEGER DEFAULT 0
            """)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤–∂–µ –¥–µ—Ä–µ–≤–∞
        cursor.execute("""
        SELECT reputation, presents FROM profiles WHERE user_id = ?
        """, (user_id,))
        result = cursor.fetchone()

        # –Ø–∫—â–æ –¥–µ—Ä–µ–≤–æ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–µ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ NULL)
        if result and result[0] is not None and result[1] is not None:
            await message.answer("–í–∞—à–µ –¥–µ—Ä–µ–≤–æ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ë—ñ–ª—å—à–µ —Ü—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –Ω–µ —Ç—Ä–µ–±–∞. üéÑ")
            return

        # –Ø–∫—â–æ –¥–µ—Ä–µ–≤–∞ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–µ (–∑–Ω–∞—á–µ–Ω–Ω—è NULL)
        if result is None or result[0] is None or result[1] is None:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è 1 –¥–ª—è reputation —Ç–∞ presents
            cursor.execute("""
            INSERT OR IGNORE INTO profiles (user_id, first_name, last_name, reputation, presents)
            VALUES (?, ?, ?, 1, 1)
            """, (user_id, message.from_user.first_name, message.from_user.last_name))

            cursor.execute("""
            UPDATE profiles
            SET bio = COALESCE(bio, ''), profile_photo_id = COALESCE(profile_photo_id, ''),
                reputation = COALESCE(reputation, 1), presents = COALESCE(presents, 1)
            WHERE user_id = ?
            """, (user_id,))

            conn.commit()

            await message.answer("–í–∞—à–µ –¥–µ—Ä–µ–≤–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! üéÑ")


@router.message(Command('xo'))
async def xo(message: Message) -> None:
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    await message.answer(
        f'{X} —á–∏ {O}',
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text=X, callback_data='select:x'),
            types.InlineKeyboardButton(text=O, callback_data='select:o')
        ]])
    )
    

@router.callback_query(lambda call: call.data.startswith('select:'))
async def game_starts(callback: CallbackQuery):
    game_id = str(callback.message.message_id) + '|' + str(callback.message.chat.id)
    xo = XO(game_id, x_symbol=X, o_symbol=O)

    if callback.data == 'select:x':
        xo.x_user_id_is(callback.from_user.id)
        return await bot.edit_message_text(
            text=f'{xo.symbols["x"]} {callback.from_user.first_name} —Ö–æ–¥–∏—Ç—å',
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=field_markup(xo.field())
        )

    if callback.data == 'select:o':
        xo.o_user_id_is(callback.from_user.id)
        return await bot.edit_message_text(
            text=f'{xo.symbols["o"]} {callback.from_user.first_name} –æ—á—ñ–∫—É—î —Å—É–ø–µ—Ä–Ω–∏–∫–∞',
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text='X', callback_data='join')
            ]])
        )


@router.callback_query(lambda call: call.data.startswith('join'))
async def join_to_game(callback: CallbackQuery):
    game_id = str(callback.message.message_id) + '|' + str(callback.message.chat.id)
    xo = XO(game_id, x_symbol=X, o_symbol=O)
    xo.x_user_id_is(callback.from_user.id)
    o_user = await bot.get_chat(int(xo.o_user_id))
    message_text = (
        f'{xo.symbols["x"]} {callback.from_user.first_name}\n'
        f'üÜöÔ∏è\n{xo.symbols["o"]} {o_user.first_name}\n\n'
        f'{xo.symbols["x"]} {callback.from_user.first_name} —Ö–æ–¥–∏—Ç—å'
    )
    await bot.edit_message_text(
        message_text,
        chat_id=callback.message.chat.id, 
        message_id=callback.message.message_id, 
        reply_markup=field_markup(xo.field())
    )


@router.callback_query(lambda call: call.data.startswith('walk:'))
async def walk(callback: CallbackQuery):
    game_id = str(callback.message.message_id) + '|' + str(callback.message.chat.id)
    xo = XO(game_id, x_symbol=X, o_symbol=O)

    if xo.o_user_id == "None" and xo.who_walk() == 'o':
        xo.o_user_id_is(callback.from_user.id)

    if str(callback.from_user.id) not in [str(xo.o_user_id), str(xo.x_user_id)]:
        return await bot.answer_callback_query(callback.id, "–¢–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—ñ—î—ó –≥—Ä–∏")
    
    if xo.who_walk() == 'x' and xo.x_user_id == callback.from_user.id:
        xo.make_move(callback.data.split(':')[1])
        
    elif xo.who_walk() == 'o' and xo.o_user_id == callback.from_user.id:
        xo.make_move(callback.data.split(':')[1]) 

    else:
        return await bot.answer_callback_query(callback.id, "–¶–µ –Ω–µ —Ç–≤—ñ–π —Ö—ñ–¥")
    
    if xo.does_win():
        win = ['x', 'o']
        win.remove(xo.who_walk())
        result = result_text(xo.field())
        result = result.replace('x', xo.symbols['x']).replace('o', xo.symbols['o']).replace('„Ö§', '‚¨ú')
        win_user = await bot.get_chat(callback.from_user.id)
        lost_user = await bot.get_chat(int(xo.users[xo.who_walk()]))
        text = (
            f'{xo.symbols[win[0]]}{win_user.first_name} üèÜ\n'
            f'{xo.symbols[xo.who_walk()]}{lost_user.first_name}\n\n'
            f'{result}'
        )
        xo.del_game()
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="tg channel", callback_data=f"tgc", url="https://t.me/+7WedrNk_8i9iMDAy")
        ]])
        
        return await bot.edit_message_text(text, chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=markup)
    
    if xo.draw():
        result = result_text(xo.field())
        result = result.replace('x', xo.symbols['x']).replace('o', xo.symbols['o'])
        x_user = await bot.get_chat(xo.x_user_id)
        o_user = await bot.get_chat(xo.o_user_id)
        text = (
            f'{xo.symbols["x"]}{x_user.first_name}\n'
            'ü§ù\n'
            f'{xo.symbols["o"]}{o_user.first_name}'
            '\n\n'
            f'{result}'
        )
        xo.del_game()
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="tg channel", callback_data=f"tgc", url="https://t.me/+7WedrNk_8i9iMDAy")]])
        return await bot.edit_message_text(text, chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=markup)

    if xo.o_user_id == "None" and xo.who_walk() == 'o':
        x_user = await bot.get_chat(xo.x_user_id)
        text = (
            f'{xo.symbols["x"]} {x_user.first_name} –æ—á—ñ–∫—É—î –Ω–∞ —Å—É–ø–µ—Ä–Ω–∏–∫–∞\n\n'
            f'{xo.symbols["o"]} —Ö–æ–¥–∏—Ç—å'
        )
    else:
        x_user = await bot.get_chat(xo.x_user_id)
        o_user = await bot.get_chat(xo.o_user_id)
        walk_user = await bot.get_chat(xo.users[xo.who_walk()])
        text = (
            f'{xo.symbols["x"]} {x_user.first_name}\n'
            f'üÜöÔ∏è\n{xo.symbols["o"]} {o_user.first_name}\n\n'
            f'{xo.symbols[xo.who_walk()]} {walk_user.first_name} —Ö–æ–¥–∏—Ç—å'
        )
    await bot.edit_message_text(text, chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=field_markup(xo.field()))


@router.message(Command('whois'))
async def whois_user(message: Message):
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        args = message.text.split()
        if len(args) < 2:
            await message.reply("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /whois @username")
            return

        username = args[1]
        if not username.startswith("@"):
            await message.reply("‚ùå –Æ–∑–µ—Ä–Ω–µ–π–º –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ '@', –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @username")
            return

        # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            chat = await bot.get_chat(username)
            await message.reply(
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {chat.full_name or 'N/A'}\n"
                f"üÜî ID: `{chat.id}`\n"
                f"‚úçÔ∏è –Æ–∑–µ—Ä–Ω–µ–π–º: @{chat.username if chat.username else 'N/A'}",
                parse_mode="Markdown"
            )
        except Exception as inner_e:
            if "chat not found" in str(inner_e):
                await message.reply("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É.")
            else:
                await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(inner_e)}")

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")


@router.message(Command("profile"))
async def profile_command(message: types.Message):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @username)
    args = message.text.split(maxsplit=1)
    if len(args) > 1:  # –Ø–∫—â–æ —î –∞—Ä–≥—É–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (username)
        username = args[1].lstrip('@')  # –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–º–≤–æ–ª "@" –∑ username
        user_id = None
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ username
            user = await bot.get_chat(username)
            user_id = user.id  # –û—Ç—Ä–∏–º—É—î–º–æ user_id
        except Exception as e:
            return await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username {username}. –ü–æ–º–∏–ª–∫–∞: {e}")

    else:
        # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ reply_to_message –∞–±–æ –∞–≤—Ç–æ—Ä–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        user = message.reply_to_message.from_user if message.reply_to_message else message.from_user
        user_id = user.id

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —á–∞—Ç—É, —è–∫—â–æ —ó—ó –Ω–µ —ñ—Å–Ω—É—î
    chat_id = message.chat.id
    warnings_table = create_warnings_table(chat_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
        INSERT OR IGNORE INTO profiles (user_id, first_name, last_name)
        VALUES (?, ?, ?)
        """, (user_id, user.first_name, user.last_name))

        cursor.execute("SELECT first_name, last_name, bio, profile_photo_id FROM profiles WHERE user_id = ?",
                       (user_id,))
        result = cursor.fetchone()

    if not result:
        return await message.answer("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    first_name, last_name, bio, profile_photo_id = result
    user_name = f"{first_name} {last_name}" if last_name else first_name
    bio_text = bio if bio else "–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞."

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ reputation —ñ presents
    reputation = None
    presents = None
    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute("PRAGMA table_info(profiles);")
        columns = [column[1] for column in cursor.fetchall()]

        if "reputation" in columns:
            cursor.execute("SELECT reputation FROM profiles WHERE user_id = ?", (user_id,))
            reputation_data = cursor.fetchone()
            reputation = reputation_data[0] if reputation_data else None

        if "presents" in columns:
            cursor.execute("SELECT presents FROM profiles WHERE user_id = ?", (user_id,))
            presents_data = cursor.fetchone()
            presents = presents_data[0] if presents_data else None

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
    cursor.execute(f"SELECT warns FROM {warnings_table} WHERE user_id = ?", (user_id,))
    warns = cursor.fetchone()
    warns_count = warns[0] if warns else 0

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ—ñ–ª—é
    profile_text = (
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <a href='tg://user?id={user_id}'>{user_name}</a>\n"
        f"–†–µ–ø—É—Ç–∞—Ü—ñ—è:  ‚ö†Ô∏è{warns_count}/3  |"
    )

    # –Ø–∫—â–æ —î —Ä–µ–ø—É—Ç–∞—Ü—ñ—è, –¥–æ–¥–∞—î–º–æ —ó—ó
    if reputation is not None:
        profile_text += f"  ‚ûï: {reputation}  |"

    # –Ø–∫—â–æ —î –ø–æ–¥–∞—Ä—É–Ω–∫–∏, –¥–æ–¥–∞—î–º–æ —ó—Ö
    if presents is not None:
        profile_text += f"  üéÅ: {presents}\n"
    
    profile_text += f"–ë—ñ–æ:\n{bio_text}\n"

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
    sanitized_chat_id = str(chat_id).replace("-", "_")
    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        # –ì–ª–æ–±–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
        cursor.execute("""
        SELECT user1_id, user2_id, level, start_date FROM marriages 
        WHERE user1_id = ? OR user2_id = ?
        """, (user_id, user_id))
        global_marriages = cursor.fetchall()

        # –õ–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
        cursor.execute(f"""
        SELECT user1_id, user2_id, level, start_date FROM local_relationships_{sanitized_chat_id} 
        WHERE (user1_id = ? OR user2_id = ?)
        """, (user_id, user_id))
        local_marriages = cursor.fetchall()

    if global_marriages or local_marriages:
        profile_text += f"{' ' * 15}<b>–í–∞—à—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏:</b>{' ' * 15}\n"

        # –ì–ª–æ–±–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
        if global_marriages:
            profile_text += "\n<strong>–ì–ª–æ–±–∞–ª—å–Ω—ñ:</strong>\n"
            for marriage in global_marriages:
                partner_id = marriage[1] if marriage[0] == user_id else marriage[0]
                level = marriage[2]
                start_date = datetime.strptime(marriage[3], "%Y-%m-%d")
                duration = (datetime.now() - start_date).days

                relation_type = "–®–ª—é–±" if level == 2 else "–í—ñ–¥–Ω–æ—Å–∏–Ω–∏"

                cursor.execute("SELECT first_name FROM profiles WHERE user_id = ?", (partner_id,))
                partner_name = cursor.fetchone()
                partner_name = partner_name[0] if partner_name else "–ù–µ–≤—ñ–¥–æ–º–æ"

                profile_text += (
                    f"{relation_type} –∑ <a href='tg://openmessage?user_id={partner_id}'>{partner_name}</a>  "
                    f"‚åõÔ∏è: {duration} –¥–Ω—ñ–≤."
                )

        # –õ–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
        if local_marriages:
            profile_text += "\n<strong>–õ–æ–∫–∞–ª—å–Ω—ñ:</strong>\n"
            for marriage in local_marriages:
                partner_id = marriage[1] if marriage[0] == user_id else marriage[0]
                level = marriage[2]
                start_date = datetime.strptime(marriage[3], "%Y-%m-%d")
                duration = (datetime.now() - start_date).days

                relation_type = "–®–ª—é–±" if level == 2 else "–í—ñ–¥–Ω–æ—Å–∏–Ω–∏"

                cursor.execute("SELECT first_name FROM profiles WHERE user_id = ?", (partner_id,))
                partner_name = cursor.fetchone()
                partner_name = partner_name[0] if partner_name else "–ù–µ–≤—ñ–¥–æ–º–æ"

                profile_text += (
                    f"{relation_type} –∑ <a href='tg://openmessage?user_id={partner_id}'>{partner_name}</a>  "
                    f"‚åõÔ∏è: {duration} –¥–Ω—ñ–≤.\n"
                )

    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    if profile_photo_id:
        try:
            await message.answer_photo(photo=profile_photo_id, caption=profile_text, parse_mode="HTML")
        except Exception:
            await message.answer("–§–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç.")
            await message.answer(profile_text, parse_mode="HTML")
    else:
        await message.answer(profile_text, parse_mode="HTML")


@router.message(Command("beat_with_belt"))
async def beat_with_belt(message: Message):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    voice = FSInputFile("resourses/audio/AAAA.mp3")
    await message.answer_voice(voice=voice)


@router.message(Command("stats"))
async def get_stats(message: Message):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    chat_id = message.chat.id
    sanitized_chat_id = str(chat_id).replace("-", "_")
    table_name = f"chat_{sanitized_chat_id}_messages"

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        cursor.execute(f"SELECT user_id, messages_count FROM {table_name} ORDER BY messages_count DESC")
        rows = cursor.fetchall()

        # –†–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–∞—Ç—ñ
        cursor.execute(f"SELECT SUM(messages_count) FROM {table_name}")
        total_messages = cursor.fetchone()[0] or 0

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        if rows:
            stats = f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–∞—Ç—ñ: {total_messages}\n\n"
            for row in rows:
                user_id = row[0]
                messages_count = row[1]

                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
                cursor.execute("SELECT first_name, last_name FROM profiles WHERE user_id = ?", (user_id,))
                profile = cursor.fetchone()

                if profile:
                    first_name = profile[0]
                    last_name = profile[1] if profile[1] else ""
                    user_name = f"{first_name} {last_name}" if last_name else first_name
                else:
                    # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —á–µ—Ä–µ–∑ API
                    try:
                        user = await message.bot.get_chat_member(chat_id, user_id)  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        first_name = user.user.first_name
                        last_name = user.user.last_name if user.user.last_name else ""
                        user_name = f"{first_name} {last_name}" if last_name else first_name
                    except Exception as e:
                        user_name = f"User {user_id}"  # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ API

                # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                stats += f"<a href='tg://openmessage?user_id={user_id}'>{user_name}</a>: {messages_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await message.reply(stats, parse_mode="HTML")
        else:
            await message.reply("–©–µ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


# –ö–æ–º–∞–Ω–¥–∞ /warn
@router.message(Command("warn"))
async def warn_command(message: types.Message, bot: Bot):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    if not message.reply_to_message:
        return await message.answer("–ö–æ–º–∞–Ω–¥—É /warn –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    if not await is_admin(bot, message.chat.id, message.from_user.id):
        return await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –¥–∞–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.")

    target_user = message.reply_to_message.from_user
    chat_id = message.chat.id

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —á–∞—Ç—É, —è–∫—â–æ —ó—ó –Ω–µ —ñ—Å–Ω—É—î
    warnings_table = create_warnings_table(chat_id)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        cursor.execute(f"""
        INSERT OR IGNORE INTO {warnings_table} (user_id, warns)
        VALUES (?, 0)
        """, (target_user.id,))
        cursor.execute(f"""
        UPDATE {warnings_table} SET warns = warns + 1 WHERE user_id = ?
        """, (target_user.id,))

        cursor.execute(f"SELECT warns FROM {warnings_table} WHERE user_id = ?", (target_user.id,))
        warns = cursor.fetchone()[0]

    if warns >= 3:
        await bot.ban_chat_member(chat_id, target_user.id)
        cursor.execute(f"DELETE FROM {warnings_table} WHERE user_id = ?", (target_user.id,))
        conn.commit()
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –∑–∞–±–∞–Ω–µ–Ω–∏–π –∑–∞ 3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.")
    else:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –æ—Ç—Ä–∏–º–∞–≤ {warns}/3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å.")


# –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–¥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /help, /ban, /unban) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
# –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω —á–ª–µ–Ω—Å—Ç–≤–∞
@router.message(F.content_type.in_({"new_chat_members"}))
async def new_chat_members(message: types.Message):
    for user in message.new_chat_members:
        await message.answer(
            f"–í—ñ—Ç–∞—î–º–æ, {user.first_name} {user.last_name if user.last_name else ''}! üéâ\n"
            f"–î—è–∫—É—î–º–æ, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏. "
            f"–Ø - –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ –±—É–¥—å-—è–∫–∏—Ö –ø–∏—Ç–∞–Ω—å. "
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ - /help."
        )

@router.message(F.content_type.in_({"left_chat_member"}))
async def left_chat_members(message: types.Message):
    await message.answer(
        f"–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è, {message.left_chat_member.first_name}"
        f" {message.left_chat_member.last_name if message.left_chat_member.last_name else ''}! üòî\n"
        f"–®–∫–æ–¥–∞, —â–æ –≤–∏ –ø–æ–∫–∏–¥–∞—î—Ç–µ –Ω–∞—à—É –≥—Ä—É–ø—É. –ù–∞–¥—ñ—î–º–æ—Å—è –ø–æ–±–∞—á–∏—Ç–∏ –≤–∞—Å –∑–Ω–æ–≤—É!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help", "start"))
async def help_command(message: types.Message):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    keyboard = generate_help_keyboard()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:", reply_markup=keyboard)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda call: call.data.startswith("help_"))
async def help_callback_handler(callback_query: CallbackQuery):
    category = callback_query.data.split("_", 1)[1]  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ä–æ–∑–¥—ñ–ª—É
    commands = commands_dict.get(category, [])

    if not commands:
        return await callback_query.answer("–†–æ–∑–¥—ñ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    commands_text = "\n".join(commands)
    await callback_query.message.edit_text(
        f"–ö–æ–º–∞–Ω–¥–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ <b>{category}</b>:\n\n{commands_text}",
        parse_mode="HTML",
        reply_markup=generate_help_keyboard(),
    )


# –ö–æ–º–∞–Ω–¥–∞ /ban
@router.message(Command("ban"))
async def ban_command(message: types.Message, bot: Bot):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    if not message.reply_to_message:
        return await message.answer("–ö–æ–º–∞–Ω–¥—É /ban –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    if not await is_admin(bot, message.chat.id, message.from_user.id):
        return await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

    target_user = message.reply_to_message.from_user
    if await is_target_admin(bot, message.chat.id, target_user.id):
        return await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–∞–Ω–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–∞.")

    await bot.ban_chat_member(message.chat.id, target_user.id)
    banned_users.add(target_user.id)
    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –∑–∞–±–∞–Ω–µ–Ω–∏–π.")


# –ö–æ–º–∞–Ω–¥–∞ /unban
@router.message(Command("unban"))
async def unban_command(message: types.Message, bot: Bot):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    if not message.reply_to_message:
        return await message.answer("–ö–æ–º–∞–Ω–¥—É /unban –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    if not await is_admin(bot, message.chat.id, message.from_user.id):
        return await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å —Ä–æ–∑–ø–∞–ª—é–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

    target_user = message.reply_to_message.from_user
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–ø–∏—Å–∫—É –∑–∞–±–∞–Ω–µ–Ω–∏—Ö
    if target_user.id not in banned_users:
        return await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î –≤ –±–∞–Ω—ñ.")

    await bot.unban_chat_member(message.chat.id, target_user.id)
    banned_users.remove(target_user.id)
    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–∞–Ω–µ–Ω–∏–π.")


# –ö–æ–º–∞–Ω–¥–∞ /mute
@router.message(Command("mute"))
async def mute_command(message: types.Message, bot: Bot):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    if not message.reply_to_message:
        return await message.answer("–ö–æ–º–∞–Ω–¥—É /mute –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    if not await is_admin(bot, message.chat.id, message.from_user.id):
        return await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

    target_user = message.reply_to_message.from_user
    if await is_target_admin(bot, message.chat.id, target_user.id):
        return await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–º—É—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–∞.")

    mute_time = 60 * 60  # –ó–∞–º—É—Ç–∏—Ç–∏ –Ω–∞ 1 –≥–æ–¥–∏–Ω—É
    until_date = message.date + mute_time

    await bot.restrict_chat_member(
        chat_id=message.chat.id,
        user_id=target_user.id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=until_date
    )
    muted_users[target_user.id] = until_date
    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –∑–∞–º—É—á–µ–Ω–∏–π –Ω–∞ {mute_time // 60} —Ö–≤–∏–ª–∏–Ω.")


# –ö–æ–º–∞–Ω–¥–∞ /unmute
@router.message(Command("unmute"))
async def unmute_command(message: types.Message, bot: Bot):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    if not message.reply_to_message:
        return await message.answer("–ö–æ–º–∞–Ω–¥—É /unmute –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    if not await is_admin(bot, message.chat.id, message.from_user.id):
        return await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å —Ä–æ–∑–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

    target_user = message.reply_to_message.from_user
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–ø–∏—Å–∫—É –∑–∞–º—É—á–µ–Ω–∏—Ö
    if target_user.id not in muted_users:
        return await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î –≤ –º—É—Ç—ñ.")

    await bot.restrict_chat_member(
        chat_id=message.chat.id,
        user_id=target_user.id,
        permissions=ChatPermissions(can_send_messages=True)
    )
    del muted_users[target_user.id]
    await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user.first_name} —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–º—É—á–µ–Ω–∏–π.")


# –ö–æ–º–∞–Ω–¥–∞ /report
@router.message(Command(commands=["report"]))
async def report_command(message: types.Message, bot: Bot):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    try:
        admins = await bot.get_chat_administrators(message.chat.id)
        admin_list = ""

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É
        chat_id = message.chat.id
        warnings_table = create_warnings_table(chat_id)

        with sqlite3.connect("DataBases/warns.db") as conn:
            cursor = conn.cursor()

            for admin in admins:
                user_id = admin.user.id

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
                cursor.execute("SELECT first_name, last_name FROM profiles WHERE user_id = ?", (user_id,))
                result = cursor.fetchone()

                if result:
                    first_name, last_name = result
                else:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —ñ–º'—è Telegram, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ
                    first_name = admin.user.first_name
                    last_name = admin.user.last_name

                # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                user_name = f"{first_name} {last_name}" if last_name else first_name
                admin_list += f"<a href='tg://user?id={user_id}'>{user_name}</a>\n"

        if not admin_list:
            return await message.answer("–£ —Ü—å–æ–º—É —á–∞—Ç—ñ –Ω–µ–º–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

        await message.answer(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —á–∞—Ç—É:\n{admin_list}", parse_mode="HTML")
    except Exception as e:
        await handle_command_error(message, e)


# –ö–æ–º–∞–Ω–¥–∞ /call
@router.message(Command(commands=["call"]))
async def call_command(message: types.Message, bot: Bot):
    if message.chat.type not in ["group", "supergroup"]:
        return await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –≥—Ä—É–ø–∞—Ö —ñ —Å—É–ø–µ—Ä–≥—Ä—É–ø–∞—Ö.")

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–∞—Ç—É
        admins = await bot.get_chat_administrators(message.chat.id)
        admin_ids = [admin.user.id for admin in admins]

        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–≥–∞–¥–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        mentions = []
        for admin in admins:
            if admin.user.first_name is not None and admin.user.id != 777000:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ "–≤–∏–¥–∞–ª–µ–Ω–∏—Ö" –∞–∫–∞—É–Ω—Ç—ñ–≤ —Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–∏–π –∞–∫–∞—É–Ω—Ç
                mentions.append(f"<a href='tg://user?id={admin.user.id}'>{admin.user.first_name}</a>")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≥–∞–¥–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö (–∞–±–æ –¥–æ–¥–∞—î–º–æ –≤—Ä—É—á–Ω—É)
        with sqlite3.connect("DataBases/warns.db") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id, first_name FROM profiles")
            additional_members = cursor.fetchall()

        for member in additional_members:
            user_id, first_name = member
            if user_id not in admin_ids and first_name is not None:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ "–≤–∏–¥–∞–ª–µ–Ω–∏–π" –∞–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —ñ–º'—è (None) –∞–±–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π ID
                member_status = await bot.get_chat_member(message.chat.id, user_id)
                if member_status.status != "left" and member_status.status != "kicked":
                    mentions.append(f"<a href='tg://user?id={user_id}'>{first_name}</a>")

        # Telegram –æ–±–º–µ–∂—É—î –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (4096 —Å–∏–º–≤–æ–ª—ñ–≤) —ñ 5 —Ç–µ–≥—ñ–≤ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        for i in range(0, len(mentions), 5):
            chunk = "\n".join(mentions[i:i + 5])
            await message.answer(f"–£—á–∞—Å–Ω–∏–∫–∏ —á–∞—Ç—É:\n{chunk}", parse_mode="HTML")

    except Exception as e:
        await handle_command_error(message, e)


# –ö–æ–º–∞–Ω–¥–∞ /kick
@router.message(Command("kick"))
async def kick_command(message: types.Message, bot: Bot):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    try:
        user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.get_args().split()[
            0].strip('@')

        if not await is_admin(bot, message.chat.id, user_id):
            if await is_admin(bot, message.chat.id, message.from_user.id):
                await bot.ban_chat_member(message.chat.id, user_id, until_date=0)
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∫—ñ–∫–Ω—É—Ç–∏–π.")
            else:
                await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∫—ñ–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        else:
            await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∫—ñ–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        await handle_command_error(message, e)



# 1. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω—ñ–∫–Ω–µ–π–º—É
@router.message(Command(commands=["change_nickname"]))
async def change_nickname_command(message: types.Message, command: Command):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    args = command.args  # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
    if not args:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")

    new_nickname = args.strip()
    user_id = message.from_user.id

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE profiles SET first_name = ? WHERE user_id = ?", (new_nickname, user_id))

    await message.answer(f"–í–∞—à –Ω—ñ–∫–Ω–µ–π–º —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_nickname}.")


# 2. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–∑–º—ñ–Ω–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é
@router.message(Command("set_photo"))
async def set_profile_photo_command(message: types.Message):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ —è–∫ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é."

    if not message.reply_to_message:
        return await message.answer(text)

    if not message.reply_to_message.photo:
        return await message.answer(text)

    user_id = message.from_user.id
    photo = message.reply_to_message.photo[-1].file_id  # –ë–µ—Ä–µ–º–æ –Ω–∞–π–≤–∏—â—É —è–∫—ñ—Å—Ç—å

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE profiles SET profile_photo_id = ? WHERE user_id = ?", (photo, user_id))


    await message.answer("–í–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")


# 3. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–∑–º—ñ–Ω–∏ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—ó
@router.message(Command(commands=["set_bio"]))
async def set_bio_command(message: types.Message, command: Command):
    if message.chat.type in ["group", "supergroup"] and not check_bot_command(message):
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –Ω–µ–º–∞—î –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    bio = command.args  # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
    if not bio:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –±—ñ–æ–≥—Ä–∞—Ñ—ñ—ó –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")

    user_id = message.from_user.id

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE profiles SET bio = ? WHERE user_id = ?", (bio, user_id))

    await message.answer("–í–∞—à–∞ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.")




@router.message(lambda message: message.text.lower().startswith(("!!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏", "!!—Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å")))
async def handle_relationship_message(message: types.Message):
    text = message.text.lower()
    reply = message.reply_to_message
    
    if text.startswith("!!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏"):
        if not reply:
            return await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    sender_id = message.from_user.id
    receiver_id = reply.from_user.id

    if sender_id == receiver_id:
        return await message.reply("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ —ñ–∑ —Å–∞–º–∏–º —Å–æ–±–æ—é.")

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()
        if text.startswith("!!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏"):
            cursor.execute("""
            SELECT * FROM marriages WHERE user1_id = ? OR user2_id = ?
            """, (receiver_id, receiver_id))
            if cursor.fetchone():
                return await message.reply("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π —É –≤—ñ–¥–Ω–æ—Å–∏–Ω–∞—Ö.")

        if text.startswith("!!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏"):
            cursor.execute("""
            SELECT * FROM marriages WHERE user1_id = ? OR user2_id = ?
            """, (sender_id, sender_id))
            if cursor.fetchone():
                return await message.reply("–í–∏ –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ —É –≤—ñ–¥–Ω–æ—Å–∏–Ω–∞—Ö.")

        cursor.execute("SELECT first_name FROM profiles WHERE user_id = ?", (receiver_id,))
        receiver_name = cursor.fetchone()
        if receiver_name:
            receiver_name = receiver_name[0]
        else:
            receiver_name = reply.from_user.first_name

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–¢–∞–∫" —ñ "–ù—ñ"
    yes_button = InlineKeyboardButton(text="–¢–∞–∫", callback_data=f"relationship_confirm_{sender_id}_{receiver_id}_yes")
    no_button = InlineKeyboardButton(text="–ù—ñ", callback_data=f"relationship_confirm_{sender_id}_{receiver_id}_no")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[yes_button, no_button]])

    if text.startswith("!!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏"):
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ –≤–∏ —Å–∞–º–µ —Ç–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if message.reply_to_message.from_user.id != message.from_user.id:
            await message.reply(
                f"<a href='tg://user?id={receiver_id}'>{receiver_name}</a>, —á–∏ –∑–≥–æ–¥–Ω—ñ –≤–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏?",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await message.reply("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ –∑–∞–ø–µ—Ä–µ—á–∏—Ç–∏ —Å–≤–æ—é –≤–ª–∞—Å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é!")

    if text.startswith("!!—Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å"):
        with sqlite3.connect("DataBases/warns.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
            SELECT * FROM marriages WHERE 
            (user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?)
            """, (sender_id, receiver_id, receiver_id, sender_id))
            if not cursor.fetchone():
                return await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥–Ω–æ—Å–∏–Ω —ñ–∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")

        await message.reply(
            f"<a href='tg://user?id={receiver_id}'>{receiver_name}</a>, —á–∏ –∑–≥–æ–¥–Ω—ñ –≤–∏ —Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å? —Ü—ñ –¥–∞–Ω—ñ —î –≥–ª–æ–±–∞–ª—å–Ω–∏–º–∏ —Ç–∞ –±—É–¥–µ —à–∫–æ–¥–∞ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—ñ—é.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )


@router.callback_query(lambda call: call.data.startswith("relationship_confirm_"))
async def handle_relationship_confirmation(callback_query: CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ callback_data
    data = callback_query.data.split("_")
    sender_id = int(data[2])
    receiver_id = int(data[3])
    action = data[4]  # "yes" –∞–±–æ "no"

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ —Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if callback_query.from_user.id != receiver_id:
        return await callback_query.answer("–¶–µ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", show_alert=True)

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —á–∏ –≤—ñ–¥–º–æ–≤–∏ –≤—ñ–¥ –≤—ñ–¥–Ω–æ—Å–∏–Ω
    if action == "yes":
        if "–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏" in callback_query.message.text.lower():
            with sqlite3.connect("DataBases/warns.db") as conn:
                cursor = conn.cursor()
                cursor.execute("""
                SELECT * FROM marriages WHERE 
                (user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?)
                """, (sender_id, receiver_id, receiver_id, sender_id))
                marriage_exists = cursor.fetchone()

                if marriage_exists:
                    return await callback_query.answer("–£ –≤–∞—Å –≤–∂–µ —î –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ –∞–±–æ —à–ª—é–±.", show_alert=True)

                cursor.execute("""
                INSERT INTO marriages (user1_id, user2_id, start_date) VALUES (?, ?, ?)
                """, (sender_id, receiver_id, datetime.now().strftime("%Y-%m-%d")))

            await callback_query.message.reply(
                "–í—ñ—Ç–∞—î–º–æ! –í—ñ–¥–Ω–æ—Å–∏–Ω–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /rolewords –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –≤—ñ–¥–Ω–æ—Å–∏–Ω."
            )
            await callback_query.message.delete() 

        elif "—Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å" in callback_query.message.text.lower():
            with sqlite3.connect("DataBases/warns.db") as conn:
                cursor = conn.cursor()
                cursor.execute("""
                DELETE FROM marriages WHERE 
                (user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?)
                """, (sender_id, receiver_id, receiver_id, sender_id))

            await callback_query.message.reply("–í—ñ–¥–Ω–æ—Å–∏–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            await callback_query.message.delete() 
    else:
        await callback_query.answer("–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
        await callback_query.message.delete() 


@router.message(lambda message: message.text.lower().startswith(("!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏", "!—Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å")))
async def handle_local_relationship_message(message: types.Message):
    text = message.text.lower()
    reply = message.reply_to_message
    chat_id = message.chat.id

    if text.startswith("!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏"):
        if not reply:
            return await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    sender_id = message.from_user.id
    receiver_id = reply.from_user.id

    if sender_id == receiver_id:
        return await message.reply("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ —ñ–∑ —Å–∞–º–∏–º —Å–æ–±–æ—é.")

    sanitized_chat_id = str(chat_id).replace("-", "_")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É, —è–∫—â–æ —ó—ó –Ω–µ —ñ—Å–Ω—É—î
    create_local_relationships_table(chat_id)

    
    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        cursor.execute("SELECT first_name FROM profiles WHERE user_id = ?", (receiver_id,))
        receiver_name = cursor.fetchone()
        if receiver_name:
            receiver_name = receiver_name[0]
        else:
            receiver_name = reply.from_user.first_name
        

        # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–Ω–æ—Å–∏–Ω
        if text.startswith("!–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏"):
            cursor.execute(f"""
            SELECT * FROM local_relationships_{sanitized_chat_id} WHERE (user1_id = ? OR user2_id = ?)
            """, (receiver_id, receiver_id))
            if cursor.fetchone():
                return await message.reply("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π —É –≤—ñ–¥–Ω–æ—Å–∏–Ω–∞—Ö —É —Ü—å–æ–º—É —á–∞—Ç—ñ.")

            cursor.execute(f"""
            SELECT * FROM local_relationships_{sanitized_chat_id} WHERE (user1_id = ? OR user2_id = ?)
            """, (sender_id, sender_id))
            if cursor.fetchone():
                return await message.reply("–í–∏ –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ —É –≤—ñ–¥–Ω–æ—Å–∏–Ω–∞—Ö —É —Ü—å–æ–º—É —á–∞—Ç—ñ.")

            # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–¢–∞–∫" —ñ "–ù—ñ"
            yes_button = InlineKeyboardButton(text="–¢–∞–∫", callback_data=f"localrelationship_confirm_{sender_id}_{receiver_id}_yes")
            no_button = InlineKeyboardButton(text="–ù—ñ", callback_data=f"localrelationship_confirm_{sender_id}_{receiver_id}_no")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[no_button, yes_button]])

            await message.reply(
                f"<a href='tg://user?id={receiver_id}'>{receiver_name}</a>, —á–∏ –∑–≥–æ–¥–Ω—ñ –≤–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏?",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–∏–Ω
        elif text.startswith("!—Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å"):
            cursor.execute(f"""
            SELECT * FROM local_relationships_{sanitized_chat_id} WHERE 
            ((user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?))
            """, (sender_id, receiver_id, receiver_id, sender_id))
            
            if not cursor.fetchone():
                return await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥–Ω–æ—Å–∏–Ω —ñ–∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —É —Ü—å–æ–º—É —á–∞—Ç—ñ.")

            # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–¢–∞–∫" —ñ "–ù—ñ"
            yes_button = InlineKeyboardButton(text="–¢–∞–∫", callback_data=f"localrelationship_confirm_{sender_id}_{receiver_id}_yes")
            no_button = InlineKeyboardButton(text="–ù—ñ", callback_data=f"localrelationship_confirm_{sender_id}_{receiver_id}_no")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[no_button, yes_button]])

            await message.reply(
                f"<a href='tg://user?id={receiver_id}'>–í–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å –∑ {receiver_name}?</a>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )


@router.callback_query(lambda call: call.data.startswith("localrelationship_confirm_"))
async def handle_local_relationship_confirmation(callback_query: CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ callback_data
    data = callback_query.data.split("_")
    sender_id = int(data[2])
    receiver_id = int(data[3])
    action = data[4]  # "yes" –∞–±–æ "no"
    # –û—á–∏—â—É—î–º–æ chat_id –≤—ñ–¥ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    sanitized_chat_id = str(callback_query.message.chat.id).replace("-", "_")


    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ —Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if callback_query.from_user.id != receiver_id:
        return await callback_query.answer("–¶–µ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", show_alert=True)

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —á–∏ –≤—ñ–¥–º–æ–≤–∏ –≤—ñ–¥ –≤—ñ–¥–Ω–æ—Å–∏–Ω
    if action == "yes":
        if "–≤—ñ–¥–Ω–æ—Å–∏–Ω–∏" in callback_query.message.text.lower():
            with sqlite3.connect("DataBases/warns.db") as conn:
                cursor = conn.cursor()
                cursor.execute(f"""
                SELECT * FROM local_relationships_{sanitized_chat_id} WHERE 
                (user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?)
                """, (sender_id, receiver_id, receiver_id, sender_id))
                marriage_exists = cursor.fetchone()

                if marriage_exists:
                    return await callback_query.answer("–£ –≤–∞—Å –≤–∂–µ —î –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ –∞–±–æ —à–ª—é–±.", show_alert=True)

                # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–∏—Ö –≤—ñ–¥–Ω–æ—Å–∏–Ω
                cursor.execute(f"""
                INSERT INTO local_relationships_{sanitized_chat_id} (user1_id, user2_id, start_date) VALUES (?, ?, ?)
                """, (sender_id, receiver_id, datetime.now().strftime("%Y-%m-%d")))

            await callback_query.message.reply(
                "–í—ñ—Ç–∞—î–º–æ! –õ–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /rolewords –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –≤—ñ–¥–Ω–æ—Å–∏–Ω."
            )
            await callback_query.message.delete() 

        elif "—Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å" in callback_query.message.text.lower():
            with sqlite3.connect("DataBases/warns.db") as conn:
                cursor = conn.cursor()
                cursor.execute(f"""
                DELETE FROM local_relationships_{sanitized_chat_id} WHERE 
                (user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?)
                """, (sender_id, receiver_id, receiver_id, sender_id))

            await callback_query.message.reply("–õ–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            await callback_query.message.delete() 
    else:
        await callback_query.answer("–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
        await callback_query.message.delete() 


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —à–ª—é–±—É/–≤—ñ–¥–Ω–æ—Å–∏–Ω
@router.message(lambda message: message.text.lower().startswith("!—à–ª—é–±–∏"))
async def marriages_command(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @username)
    args = message.text.split(maxsplit=1)
    if len(args) > 1:  # –Ø–∫—â–æ —î –∞—Ä–≥—É–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (username)
        username = args[1].lstrip('@')  # –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–º–≤–æ–ª "@" –∑ username
        user_id = None
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ username
            user = await bot.get_chat(username)
            user_id = user.id  # –û—Ç—Ä–∏–º—É—î–º–æ user_id
        except Exception as e:
            return await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username {username}. –ü–æ–º–∏–ª–∫–∞: {e}")

    else:
        # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ reply_to_message –∞–±–æ –∞–≤—Ç–æ—Ä–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        user = message.reply_to_message.from_user if message.reply_to_message else message.from_user
        user_id = user.id

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏
    relationships_text = await get_relationships(user_id, message.chat.id)

    if relationships_text:
        await message.answer(relationships_text, parse_mode="HTML")
    else:
        await message.answer("–í—ñ–¥–Ω–æ—Å–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML")


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ç–æ–ø —à–ª—é–±—ñ–≤
@router.message(lambda message: message.text.lower().startswith("!—Ç–æ–ø—à–ª—é–±—ñ–≤"))
async def top_marriages_command(message: types.Message):
    user_id = message.from_user.id  # –ë–µ—Ä–µ–º–æ user_id –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø —à–ª—é–±–∏ –¥–ª—è —á–∞—Ç—É
    marriages_text = await get_top_marriages(message.chat.id, user_id)

    if marriages_text:
        await message.answer(marriages_text, parse_mode="HTML")
    else:
        await message.answer("–ù–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–∏—Ö —à–ª—é–±—ñ–≤ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ.", parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–æ–∑–¥–∞—á—ñ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó
@router.message(lambda message: message.text == "+")
async def give_reputation(message: Message):
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
    else:
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–ø–æ–∂–µ—Ä—Ç–≤—É–≤–∞–Ω–Ω—è (–Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Å–∞–º–æ–º—É —Å–æ–±—ñ)
    if user_id == target_user_id:
        await message.answer("–ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Å–∞–º–æ–º—É —Å–æ–±—ñ!")
        return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
    current_date = date.today().isoformat()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ date, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É

    with sqlite3.connect("DataBases/warns.db") as conn:
        cursor = conn.cursor()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ `profiles`, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS profiles (
            user_id INTEGER PRIMARY KEY,
            reputation INTEGER DEFAULT 0
        )
        """)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ `reputation_logs`, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS reputation_logs (
            giver_id INTEGER NOT NULL,
            receiver_id INTEGER NOT NULL,
            date_given TEXT NOT NULL,
            PRIMARY KEY (giver_id, receiver_id, date_given)
        )
        """)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –¥–∞–≤–∞–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—å–æ–≥–æ–¥–Ω—ñ
        cursor.execute("""
        SELECT 1
        FROM reputation_logs
        WHERE giver_id = ? AND receiver_id = ? AND date_given = ?
        """, (user_id, target_user_id, current_date))
        already_given = cursor.fetchone()

        if already_given:
            await message.answer("–í–∏ –≤–∂–µ –¥–∞–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—å–æ–≥–æ–¥–Ω—ñ.")
            return

        # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é –ª–æ–≥—ñ–≤
        cursor.execute("""
        INSERT INTO reputation_logs (giver_id, receiver_id, date_given)
        VALUES (?, ?, ?)
        """, (user_id, target_user_id, current_date))

        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("""
        SELECT reputation
        FROM profiles
        WHERE user_id = ?
        """, (target_user_id,))
        result = cursor.fetchone()

        if result is None:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ profiles
            cursor.execute("""
            INSERT INTO profiles (user_id, reputation)
            VALUES (?, 1)
            """, (target_user_id,))
        else:
            cursor.execute("""
            UPDATE profiles
            SET reputation = reputation + 1
            WHERE user_id = ?
            """, (target_user_id,))

        conn.commit()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        user_name = message.reply_to_message.from_user.full_name
        await message.answer(f"–í–∏ –¥–æ–¥–∞–ª–∏ +1 –¥–æ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}. üéâ")


@router.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: Message):
    text = message.text
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.is_bot

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ª–æ–≤–æ "—Å–∏–Ω—É" (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
    contains_son = any(word in text.lower() for word in son)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Ñ–∞–π–ª—É
    save_message_to_file(text)

    # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –±–∞–∑—ñ
    update_message_count(chat_id, user_id)
    
    if "—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ" in text.lower():
        await message.reply("–ì–µ—Ä–æ—è–º —Å–ª–∞–≤–∞!")
    elif is_reply_to_bot or contains_son:
        random_quote = get_random_message()
        await message.reply(random_quote)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10
    elif random.randint(1, 100) == 5:
        random_quote = get_random_message()
        if random_quote:
            await message.reply(random_quote)
        else:
            await message.reply("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è.")
